---
import type {CollectionEntry} from "astro:content";
import type {MarkdownHeading} from "astro";
import type {HeadingTree} from '../env'
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import License from '../components/License.astro';
import TableOfContents from '../components/TableOfContents.astro';

type Props = CollectionEntry<'blog'>['data'] & {headings: MarkdownHeading[]}
const { title, description, pubDate, updatedDate, heroImage, license, original, emoji, tags, headings } = Astro.props;

function buildHeadingsForest(headings: MarkdownHeading[]) {
	const forest: HeadingTree[]  = [];
	const parentHeadings = new Map();
	headings.forEach((h) => {
		const heading = { ...h, subheadings: [] };
		parentHeadings.set(heading.depth, heading);
		// Change 2 to 1 if your markdown includes your <h1>
		if (heading.depth <= 2) {
			forest.push(heading);
		} else {
			parentHeadings.get(heading.depth - 1).subheadings.push(heading);
		}
	});
	return forest;
}
const headingsForest = buildHeadingsForest(headings)
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={title} description={description ?? ''} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
				display: flex;
				flex-direction: row;
				justify-content: center;
			}
			aside {
				flex: 1;
				text-align: right;
			}
			.hero-image {
				width: 100%;
				display: flex;
				justify-content: center;
				& img {
					display: block;
					width: auto;
					margin: 0 auto;
					border-radius: 12px;
				}

				& .hero-constraint {
					max-width: 1020px;
				}
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: var(--gray-dark);
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
				& h1 {
					margin: 0 0 0.5em 0;
				}
			}
			.date {
				margin-bottom: 0.5em;
				color: var(--pale-text-color);
			}
			.last-updated-on {
				font-style: italic;
			}
			.metadata {
				font-size: .8em;
				color: var(--gray-dark);
				display: flex;
				width: 100%;
				justify-content: space-around;
			}
			nav {
				top: 0;
				padding-top: 1em;
				position: sticky;
				text-align: left;
				display: inline-block;
				max-width: 240px;
			}
			@media (max-width: 1200px) {
				.whitespace {
					display: none;
				}
			}
			@media (max-width: 960px) {
				aside {
					display: none;
				}
			}
		</style>
	</head>

	<body>
		<Header scrollTracker={true} />
		<main>
			<aside class={`${headingsForest.length <= 1 ? 'whitespace' : ''}`}>
				{
					headingsForest.length > 1 && (
						<nav>
							<TableOfContents title={`${emoji ?? ''}${title}`} headings={headingsForest}/>
						</nav>
					)
				}
			</aside>
			<article>
				<div class="hero-image">
					<div class="hero-constraint">
						{heroImage && <img width={1020} height={510} src={heroImage} alt={description} />}
					</div>
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{emoji ?? ''}{title}</h1>
						<div class="metadata">
							{license && <License license={license} />}
							{original && <span>First published at <a href={original}>{(new URL(original)).hostname}</a></span>}
						</div>
						<hr />
					</div>
					<slot />
					{tags && (
						<div class="tags">
							{
								tags.map((tag: string) =>
									<a href={`/blog/tag/${tag}`}>
										{tag.replace('-', ' ')}
									</a>
								)
							}
						</div>
					)}
				</div>
			</article>
			<aside class="whitespace"></aside>
		</main>
		<Footer />
	</body>
</html>

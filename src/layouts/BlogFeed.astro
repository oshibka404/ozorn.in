---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import FormattedDate from '../components/FormattedDate.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

const allPosts = await getCollection('blog');
const tags = new Map<string, number>()

allPosts.forEach(post => {
    post.data.tags?.forEach((tag: string) => {
        const count = tags.get(tag) ?? 0;
        tags.set(tag, count + 1)
    })
})

const ruCount = allPosts.reduce((acc, post) => post.data.lang === 'ru' ? acc + 1 : acc, 0)
const enCount = allPosts.reduce((acc, post) => post.data.lang === 'en' ? acc + 1 : acc, 0)

type Props = {
    posts: CollectionEntry<'blog'>[];
    title: string;
    tag?: string;
}

const {posts, title, tag} = Astro.props;

const postsByYear = posts.reduce((acc, post) => {
    const year = post.data.pubDate.getFullYear()
    const postsInYear = acc.get(year) ?? []
    postsInYear.push(post)
    acc.set(year, postsInYear)
    return acc
}, new Map<number, CollectionEntry<'blog'>[]>())
---

<!doctype html>
<html lang="en">
<head>
    <BaseHead title={`${title} â€” ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
    <style>
        main {
            width: 960px;
            padding: 0.5em 1.5em 2em;
        }
        section {
            display: flex;
            gap: .5em;
            color: rgb(var(--gray));
        }
        ul {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            list-style-type: none;
            margin: 0;
            padding: 0;
        }
        ul li * {
            text-decoration: none;
            transition: 0.2s ease;
        }
        .title {
            margin: 0 .25em 0 0;
            color: rgb(var(--black));
            line-height: 1;
        }
        .title, .description, .date {
            display: inline;
            font-size: 1em;
            margin-right: .25em;
        }
        .description {
            color: rgb(var(--black));
        }
        .date {
            color: rgb(var(--gray));
            white-space: nowrap;
        }
        ul li a:hover .title,
        ul li a:hover .description,
        ul li a:hover .date {
            color: rgb(var(--accent));
        }
        sup {
            color: rgb(var(--gray));
        }
        @media (max-width: 720px) {
            ul {
                gap: 0.5em;
            }
        }
        a.active {
            background-color: rgb(var(--accent-dark));
            color: var(--white);
        }
    </style>
</head>
<body>
<Header />
<main>
    {tag && <h1>{tag.replace('-', ' ')}</h1>}
    <p>
        I write in <a href="/blog">English</a><sup>{enCount}</sup> and <a href="/blog/ru">Russian</a><sup>{ruCount}</sup>
        on topics of {[...tags.keys()].map((key, index, array) => {
            let separator = index === array.length - 1 ? '' : ','
            let conjunction = index === array.length - 2 ? ' and ' : ''
            const tagName = key.replace('-', ' ')
            return (
                <span>
                    <a href=`/blog/tag/${key}` class:list={{
                        active: key === tag
                    }}>{tagName}{separator}</a><sup>{tags.get(key)}</sup>
                    {conjunction}
                </span>
            )
        })}.
    </p>
    {
        [...postsByYear.keys()]
            .sort((a, b) => b - a)
            .map((year) => {
                const postsInYear = postsByYear.get(year)!
                return <section>
                    <div>{year}</div>
                    <ul>
                        {
                            postsInYear.map((post: any) => (
                                    <li>
                                        <a href={`/blog/${post.slug}/`}>
                                            <h4 class="title">{post.data.emoji || ''} {post.data.title}</h4>
                                            {
                                                post.data.description &&
                                                    <p class="description">{post.data.description}</p>
                                            }
                                            {
                                                <p class="date">
                                                    <FormattedDate date={post.data.pubDate} year={false} />
                                                </p>
                                            }
                                        </a>
                                    </li>)
                            )
                        }
                    </ul>
                </section>
        })
    }
</main>
<Footer />
</body>
</html>

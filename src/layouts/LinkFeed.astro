---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import {type LinkData} from "../content/linksData";

type Props = {
    allLinks: LinkData[];
    links: LinkData[];
    title: string;
    activeTag?: string;
    baseUrl?: string;
}

const {links, title, activeTag, baseUrl = 'links', allLinks} = Astro.props

const tags = allLinks.reduce((acc, link) => {
    for (const tag of link.tags) {
        if (!acc.has(tag)) acc.set(tag, [])
        acc.get(tag)!.push(link);
    }
    return acc;
}, new Map<string, LinkData[]>())

const linksByYear = links.reduce((acc, link) => {
    const year = new Date(link.date).getFullYear()
    const postsInYear = acc.get(year) ?? []
    postsInYear.push(link)
    acc.set(year, postsInYear)
    return acc
}, new Map<number, LinkData[]>())

---

<!doctype html>
<html lang="en">
<head>
    <BaseHead title={`${title} — ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
    <style>
        main {
            width: 960px;
            padding: 0.5em 1.5em 2em;
            display: flex;
            flex-direction: column;
            gap: 1em;
        }
        .year {
            color: rgb(var(--gray))
        }
        .tag {
            margin-right: .25em;
        }
        .tag > a.active {
            background-color: var(--accent-dark);
            color: rgb(var(--white));
        }
        blockquote {
            font-size: 1em;
        }
        section {
            display: flex;
            gap: .5em;
        }
        ul {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            list-style-type: none;
            margin: 0;
            padding: 0;
        }
        ul li * {
            text-decoration: none;
            transition: 0.2s ease;
        }
    </style>
</head>
<body>
<Header />
<main>
    {activeTag && <h1>{activeTag.replace('-', ' ')}</h1>}
    <p class="tags">{
        [...tags.keys()]
            .filter((tag) => tags.get(tag)!.length > 1)
            .sort((a,b) => tags.get(b)!.length - tags.get(a)!.length)
            .slice(0, 10)
            .map((tag) =>
                (<span class="tag"><a href={tag === activeTag ? `/${baseUrl}/` : `/${baseUrl}/tag/${tag}`} class:list={{
                    active: tag === activeTag,
                }}>{tag.replace('-', ' ')}</a><sup>{tags.get(tag)!.length}</sup></span>)
            )
    }
    <ul>
        {
            [...linksByYear.keys()]
                .sort((a, b) => b - a)
                .map((year) => {
                    const linksInYear = linksByYear.get(year)!
                    return (
                            <section>
                                <div class="year">{year}</div>
                                <ul>
                                    {linksInYear.map(({url, comment, quote, title}) => (
                                            <li>
                                                {url ? <a href={url}>{title}</a> : title}
                                                {comment &&
                                                        <>— {comment}</>}
                                                {quote &&
                                                        <blockquote>{quote}</blockquote>}
                                            </li>
                                    ))}
                                </ul>
                            </section>
                    )
                })
        }
    </ul>
</main>
<Footer />
</body>
</html>
